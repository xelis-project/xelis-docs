'\" t
.\"     Title: xelis_daemon
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.20
.\"      Date: 2025-09-19
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "XELIS_DAEMON" "1" "2025-09-19" "\ \&" "\ \&"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
xelis_daemon \- run a xelis blockchain node
.SH "SYNOPSIS"
.sp
xelis_daemon [OPTIONS] [CHECKPOINTS]
.SH "DESCRIPTION"
.sp
XELIS is an innovative cryptocurrency built from scratch with BlockDAG, Homomorphic Encryption, Zero\-Knowledge Proofs, and Smart Contracts.
.sp
\fB\f(CRxelis_daemon\fP\fP is the core service that runs the XELIS blockchain on your machine. It is responsible for maintaining a full copy of the distributed ledger, validating incoming blocks, and relaying transactions across the network.
.sp
When the daemon is running, your node actively participates in the XELIS peer\-to\-peer system, helping to secure the network and keep it synchronized in real time.
.sp
The daemon also provides the foundation for other components, such as the wallet and the miner, by exposing an interface through which they can interact with the blockchain. Running the daemon is an essential step for users who want to operate a full node, mine directly on the network, or simply ensure they are working with the most up\-to\-date state of the chain.
.sp
Running a local node is highly recommended, as it ensures you remain fully trustless and independent of third parties, enhances your privacy, and helps spread and secure the XELIS network.
.sp
A formatted and hyperlinked copy of the latest \f(CRxelis_daemon\fP documentation can be viewed at \c
.br
.URL "https://docs.xelis.io/getting\-started/configuration/xelis_daemon" "" ""
or
.br
.URL "https://github.com/xelis\-project/xelis\-docs/resources/manpages/xelis_daemon/xelis_daemon.html" "" ""
.SH "OPTIONS"
.sp
\f(CR\-h\fP, \f(CR\-\-help\fP
.RS 4
Print help (see a summary with \f(CR\-h\fP).
.RE
.sp
\f(CR\-V\fP, \f(CR\-\-version\fP
.RS 4
Print version.
.RE
.sp
\f(CR\-\-network\fP
.RS 4
Select the blockchain network the node will connect to.
.sp
Possible values: \f(CRmainnet\fP, \f(CRtestnet\fP, \f(CRdevnet\fP
.sp
Default: \f(CRmainnet\fP
.RE
.sp
\f(CR\-\-dir\-path <path>\fP
.RS 4
Set the directory \f(CR<path>\fP for blockchain storage. This will be appended by the network name for the database directory. The path specified must end with a slash (\f(CR/\fP).
.RE
.sp
\f(CR\-\-config\-file <file>\fP
.RS 4
Load the daemon configuration from <file>. JSON format.
.RE
.sp
\f(CR\-\-generate\-config\-template\fP
.RS 4
Generate the template at the \f(CR\-\-config\-file\fP path
.RE
.sp
\f(CR\-\-allow\-boost\-sync\fP
.RS 4
Use Boost Sync Mode. This mode requests all blocks in parallel instead of sequentially during synchronization. It is not enabled by default because it will request several blocks before validating each previous block, which requires more system resources.
.RE
.sp
\f(CR\-\-allow\-fast\-sync\fP
.RS 4
Enable fast sync mode. Fast sync mode downloads the last chain state from any peer. It allows having a light node with very light disk usage as it will use only the latest available data.
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
This mode \fBwill not\fP store any blocks or transactions and \fBwill not\fP verify the history locally.
.sp .5v
.RE
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Warning
.ps -1
.br
.sp
Use this option with extreme caution because you are trusting nodes to have a valid bootstrapped chain.
.sp .5v
.RE
.RE
.sp
\f(CR\-\-auto\-prune\-keep\-n\-blocks <n>\fP
.RS 4
Enable the auto prune mode and prune the chain at each new block by keeping at least \f(CR<n>\fP blocks before the top block. This is useful to keep a light node and to reduce the disk usage.
.RE
.sp
\f(CR\-\-disable\-p2p\-server\fP
.RS 4
Disable the P2P Server. No connections will be accepted. The node will not be able not be able to sync the chain or broadcast mined blocks.
.RE
.sp
\f(CR\-\-disable\-rpc\-server\fP
.RS 4
Disable the RPC Server. This will also disable the GetWork Server as it is loaded on RPC server.
.RE
.sp
\f(CR\-\-max\-peers <n>\fP
.RS 4
Set the maximum number of P2P peers to connect to \f(CR<n>\fP.
.br
Default: \f(CR32\fP
.RE
.sp
\f(CR\-\-exclusive\-nodes <nodes>\fP
.RS 4
Set exclusive nodes to connect to.
.sp
Sets a list of \f(CR<nodes>\fP (node addresses) that the node must connect to, and this connection is maintained. The node will only connect to the listed nodes and \fBwill not\fP connect to any other nodes, including seed nodes.
.sp
A comma must separate each Socket Address.
.sp
Example \f(CR\-\-exclusive\-nodes 0.0.0.0:2125,0.0.0.0:2126\fP
.RE
.sp
\f(CR\-\-priority\-nodes <nodes>\fP
.RS 4
Gives connection priority to a list of \f(CR<nodes>\fP (node addresses) when P2P is started. A priority node is connected only one time. Connections will be made with priority nodes first, and then with regular nodes. Connections to priority nodes will be also maintained in case of disconnection.
.sp
A comma must separate each Socket Address.
.sp
Other nodes will still be connected to as long as the maximum number of peers is not reached.
.sp
Example to connect to two nodes: \f(CR\-\-priority\-nodes 0.0.0.0:2125,0.0.0.0:2126\fP
.RE
.sp
\f(CR\-\-tag <tag>\fP
.RS 4
Identify the node in the network using \f(CR<tag>\fP name.
.br
This is useful to identify the node in the network. The maximum length of \f(CR<tag>\fP is 16 characters.
.RE
.sp
\f(CR\-\-max\-chain\-response\-size <n>\fP
.RS 4
Set the maximum chain response size to <n>.
.br
This is useful for low devices that want to reduce resource usage and for high\-end devices that want to (or help others to) sync faster.
.sp
Minimum size: \f(CR512\fP, Maximum size: \f(CR16384\fP
.sp
Default: \f(CR4096\fP
.RE
.sp
\f(CR\-\-disable\-ip\-sharing\fP
.RS 4
Ask peers to not share the node IP address to others and/or through the API.
.sp
This is useful for people that \fBdo not\fP want their IP address to be revealed in the RPC API or \fBnot\fP shared with other nodes as a potential new peer to connect to. By default, your IP is allowed to be shared across the network to other nodes.
.RE
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
This option may prevent new incoming peers as your IP will not be shared with others.
.sp .5v
.RE
.sp
\-\-disable\-getwork\-server
.RS 4
Disable GetWork Server (WebSocket for miners)
.RE
.sp
\-\-getwork\-rate\-limit\-ms <getwork\-rate\-limit\-ms>
.RS 4
Set the rate limit for GetWork server in milliseconds. In the case of high transactions added in mempool, new jobs are rate limited. If is set to 0 (no limit), any new job will be sent to miners directly
.sp
Default: \f(CR500\fP
.RE
.sp
\f(CR\-\-getwork\-notify\-job\-concurrency <n>\fP
.RS 4
Set the concurrency for GetWork server during a new job notification. Notify concurrently to \f(CR<n>\fP miners at a time.
.br
\f(CR<n> = 0\fP means no limit and will process as one task per miner. Default is detected based on available parallelism.
.sp
Default: 16
.RE
.sp
\f(CR\-\-prometheus\-enable\fP
.RS 4
Enable Prometheus metrics server This only works if the RPC server is enabled
.RE
.sp
\f(CR\-\-prometheus\-route <route>\fP
.RS 4
Set the \f(CR<route>\fP for the Prometheus metrics export.
.sp
Default: \f(CR/metrics\fP
.RE
.sp
\f(CR\-\-rpc\-bind\-address <address>\fP
.RS 4
RPC bind address to listen for HTTP requests
.sp
Default: \f(CR0.0.0.0:8080\fP
.RE
.sp
\f(CR\-\-rpc\-threads <n>\fP
.RS 4
Set the number of workers to spawn for the HTTP server to <n>. If not provided, it will use the available parallelism.
.sp
Default: \f(CR16\fP
.RE
.sp
\f(CR\-\-rpc\-notify\-events\-concurrency <n>\fP
.RS 4
Set the number of concurrent tasks that will be used to notify the events to the clients to \f(CR<n>\fP. By default, it will use the available parallelism. If \f(CR<n> = 0\fP, it will be unlimited.
.sp
Default: \f(CR16\fP
.RE
.sp
\f(CR\-\-allow\-priority\-blocks\fP
.RS 4
Allow blocks coming from priority nodes to be fast\-forwarded to our peers.
.sp
Propagate a new block to our peers as soon as we receive it from a priority node before verifying it ourselves. This reduces the time to propagate a new block to our peers. Useful for pools operating having several nodes across the world to propagate their blocks faster.
.sp
By default, this is disabled.
.RE
.sp
\f(CR\-\-simulator <simulator>\fP
.RS 4
Enable the \f(CR<simulator>\fP mode. This will disable the P2P server and will simulate the blockchain based on its variant.
.br
This will generate new blocks when necessary and will not connect to any other nodes.
.sp
Available values are:
.br
\- \f(CRblockchain\fP: Simulate the blockchain with a new block every 15 seconds and up to 15 random transactions.
.br
\- \f(CRblockdag\fP: Simulate the blockdag with up to 3 new block every 15 seconds and up to 15 random transactions.
.br
\- \f(CRstress\fP: Simulate a blockDAG under attacks with heavy blocks and a lot of transactions.
.RE
.sp
\f(CR\-\-skip\-pow\-verification\fP
.RS 4
Skip PoW verification.
.RE
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Warning
.ps -1
.br
.sp
This is dangerous and should not be used in production!
.sp .5v
.RE
.sp
\f(CR\-\-skip\-block\-template\-txs\-verification\fP
.RS 4
Disable the (double) verification of the transactions while building a block template. This is useful to speed up the block template creation for miners node.
.sp
This will rely entirely on the transaction verification done by the mempool and will not verify the transactions again.
.RE
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
In case of a TX not deleted correctly from the mempool, it may be included in a block template and will make your block rejected by the network.
.sp .5v
.RE
.sp
\f(CR\-\-genesis\-block\-hex <hex>\fP
.RS 4
Use the hexadecimal representation of the genesis block for the dev mode. This is useful for testing and development
.RE
.sp
\f(CR\-\-txs\-verification\-threads\-count <n>\fP
.RS 4
Set the thread count to use during TXs verifications to \f(CR<n>\fP. By default, it will detect the best value. If \f(CR<n> = 1\fP, it will use the main thread.
.sp
Default: \f(CR16\fP
.RE
.SS "P2P"
.sp
\f(CR\-\-p2p\-bind\-address <address>\fP
.RS 4
Set the P2P bind \f(CR<address>\fP to listen on for incoming connections.
.sp
Default: \f(CR0.0.0.0:2125\fP
.RE
.sp
\f(CR\-\-p2p\-max\-outgoing\-peers <n>\fP
.RS 4
Set the maximum number of P2P outgoing peers to <n>.
.sp
This is useful to limit to how many nodes you want to connect to.
.sp
Default: \f(CR8\fP
.RE
.sp
\f(CR\-\-p2p\-concurrency\-task\-count\-limit <limit>\fP
.RS 4
Set the number of concurrent tasks accepting new incoming connections to <limit>
.sp
Default: \f(CR4\fP
.RE
.sp
\f(CR\-\-p2p\-proxy\-address <address>\fP
.RS 4
Set a proxy \f(CR<address>\fP to be used.
.RE
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
Make sure to set \f(CR\-\-p2p\-proxy\fP along with it when connecting to a peer.
.sp .5v
.RE
.sp
\f(CR\-\-p2p\-proxy <protocol>\fP
.RS 4
Set the proxy \f(CR<protocol>\fP to use when connecting to a peer.
.br
Possible values: \f(CRsocks5\fP, \f(CRsocks4\fP
.RE
.sp
\f(CR\-\-p2p\-proxy\-username <username>\fP
.RS 4
Set the Proxy \f(CR<username>\fP for authentication.
.RE
.sp
\f(CR\-\-p2p\-proxy\-password <password>\fP
.RS 4
Set the proxy \f(CR<password>\fP for authentication.
.RE
.sp
\f(CR\-\-p2p\-on\-dh\-key\-change <action>\fP
.RS 4
Execute a specific \f(CR<action>\fP when the P2p Diffie\-Hellman Key of a peer is different from our stored one. By default, it will ignore the key change and update it.
.sp
Possible values:
.br
\- \f(CRwarn\fP:   Warn the user by logging a message.
.br
\- \f(CRreject\fP: Reject the connection with the peer.
.br
\- \f(CRignore\fP: Ignore the key change for the peer.
.sp
Default: \f(CRignore\fP
.RE
.sp
\f(CR\-\-p2p\-dh\-private\-key <p2p\-dh\-private\-key>\fP
.RS 4
P2P DH private key to use. By default, a newly generated key will be used. Reusing the same private key will keep the same public key and avoid the need to re\-verify the key with our peers. This is useful for nodes that want to keep the same public key across several restarts. Note that reusing the same key may cause your node to be tracked across IP changes.
.RE
.sp
\f(CR\-\-p2p\-stream\-concurrency <n>\fP
.RS 4
Set the amount of P2P Concurrency to use during streams to \f(CR<n>\fP. This is used to configure the number of concurrent tasks that will be used to process the streams. By default, it will use the available parallelism. If set to 0, it will be unlimited.
.sp
Default: \f(CR16\fP
.RE
.sp
\f(CR\-\-p2p\-temp\-ban\-duration <n>\fP
.RS 4
P2P Time to set when banning a peer temporarily due to the fail count limit reached. This is used to configure the time to wait before unbanning the peer. By default, it will be set to 15 minutes.
.sp
Default: \f(CR15m\fP
.RE
.sp
\-\-p2p\-fail\-count\-limit <p2p\-fail\-count\-limit>
.RS 4
P2P Fail count limit to ban a peer temporarily. This is used to configure the number of failed requests before banning the peer temporarily.
.sp
Default: \f(CR50\fP
.RE
.sp
\f(CR\-\-p2p\-disable\-reexecute\-blocks\-on\-sync\fP
.RS 4
Disable the P2P to re\-execute an orphaned block during chain sync. If set, the P2P server will stop removing the block from storage and prevent re\-executing it by adding it back to the chain.
.RE
.sp
\f(CR\-\-p2p\-block\-propagation\-log\-level\fP <level>
.RS 4
Set the P2P log \f(CR<level>\fP for the block propagation. This is used to configure the log level used during the block propagation to peers. By default, it will be set to \f(CRdebug\fP
.sp
Possible values: \f(CRoff\fP, \f(CRerror\fP, \f(CRwarn\fP, \f(CRinfo\fP, \f(CRdebug\fP, \f(CRtrace\fP
.sp
Default: \f(CRdebug\fP
.RE
.sp
\f(CR\-\-p2p\-disable\-fetching\-txs\-propagated\fP
.RS 4
Disable requesting P2P transactions propagated
.RE
.sp
\f(CR\-\-p2p\-handle\-peer\-packets\-in\-dedicated\-task\fP
.RS 4
Handle peer packets in parallel by creating a new dedicated task.
.sp
Each packet has its own dedicated task except those which are order\-dependent. They are set in a sequential executor to ensure that the order stays the same despite this option being enabled.
.sp
Creating a dedicated task per packet handling is useful for reducing latency during heavy network usage, but may increase overall resource usage (cpu, ram, io) significantly under high load.
.sp
By default, all P2P packets are handled sequentially in a single task per peer.
.RE
.SS "Logging"
.sp
\f(CR\-\-disable\-file\-logging\fP
.RS 4
Stops the daemon from writing logs to a file.
.RE
.sp
\f(CR\-\-disable\-file\-log\-date\-based\fP
.RS 4
Disable date\-based file naming for logs. If disabled, the log file will be named xelis\-daemon.log instead of YYYY\-MM\-DD.xelis\-daemon.log
.RE
.sp
\f(CR\-\-disable\-log\-color\fP
.RS 4
Disable the usage of colors in the log.
.RE
.sp
\f(CR\-\-disable\-interactive\-mode\fP
.RS 4
Disable terminal interactive mode. You will not be able to write CLI commands in it or have an updated prompt.
.RE
.sp
\f(CR\-\-filename\-log <FILENAME_LOG>\fP
.RS 4
Set the log file name to <FILENAME_LOG>. By default, the filename is set to \f(CRxelis\-daemon.log\fP.
.br
Log files are stored in the logs folder and are named with the date of the day.
.RE
.sp
\f(CR\-\-logs\-path <LOGS_PATH>\fP
.RS 4
Set the log directory path where the log files are stored to \f(CR<LOGS_PATH>\fP.
.br
By default, it will be \f(CRlogs/\fP of the current directory.
.RE
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
The directory will be created using the provided path if it does not exist. The path must end with a /.
.sp .5v
.RE
.sp
\f(CR\-\-logs\-modules <module_names>\fP
.RS 4
Module configuration for logs.
.br
A comma must separate each module name.
.br
Example: To disable logging for two modules \f(CRmod_1\fP and \f(CRmod_2\fP, use: \f(CR\-\-logs\-modules mod_1=off,mod_2=off\fP.
.RE
.sp
\f(CR\-\-log\-level <level>\fP
.RS 4
Set the log level to \f(CR<level>\fP.
.br
Available values are \f(CRtrace\fP, \f(CRdebug\fP, \f(CRinfo\fP, \f(CRwarn\fP, \f(CRerror\fP.
.br
By default, the log level is set to \f(CRinfo\fP.
.RE
.sp
\f(CR\-\-file\-log\-level <level>\fP
.RS 4
Set the file log level to \f(CR<level>\fP.
.br
Available values are \f(CRtrace\fP, \f(CRdebug\fP, \f(CRinfo\fP, \f(CRwarn\fP, \f(CRerror\fP.
.br
This is useful for having a different log level for the file log than the console log.
.br
By default, the file log level is set to value passed to \f(CR\-\-log\-level\fP (which is also \f(CRinfo\fP by default).
.RE
.sp
\f(CR\-\-datetime\-format <format>\fP
.RS 4
Change the datetime format used by the logger.
.br
Default: \f(CR"[%Y\-%m\-%d] (%H:%M:%S%.3f)"\fP
.RE
.sp
\f(CR\-\-auto\-compress\-logs\fP
.RS 4
Enable the log file auto\-compression. If enabled, the log file will be compressed every day. This will only work if the log file is enabled.
.RE
.SS "Database"
.sp
\f(CR\-\-use\-db\-backend <database>\fP
.RS 4
Use \f(CR<database>\fP backend for the blockchain data.
.sp
Possible values: \f(CRsled\fP, \f(CRrocksdb\fP
.sp
Default: \f(CRsled\fP
.RE
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
Pre\-existing blockchain data \fBwill not \fPbe migrated from one database to another, and you may lose your data.
.sp .5v
.RE
.sp
\f(CR\-\-check\-db\-integrity\fP
.RS 4
Enable the DB integrity check that happens on chain initialization. This may take some time on a large DB as it is iterating through all versioned data to verify that no pointer or version is above our current topoheight. Please note that if the recovery mode is enabled, this will be skipped. By default, it is disabled.
.RE
.sp
\f(CR\-\-flush\-db\-every\-n\-blocks <n>\fP
.RS 4
Flush the storage onto the disk every \f(CR<n>\fP (topoheight based) blocks. In the case of RocksDB, this will also compact the changes.
.RE
.SS "Sled Database Backend"
.sp
\f(CR\-\-sled\-cache\-size <n>\fP
.RS 4
Set LRUCache size to \f(CR<n>\fP (0 = disabled)
.sp
Default: \f(CR1024\fP
.RE
.sp
\f(CR\-\-sled\-internal\-cache\-size <n>\fP
.RS 4
Set the Sled database cache size to <n> bytes.
.sp
Default: \f(CR67108864\fP
.RE
.sp
\f(CR\-\-sled\-internal\-db\-mode <mode>\fP
.RS 4
Set the sled internal database to <mode>.
.sp
Possible values:
.br
\- \f(CRhigh\-throughput\fP: Use the fastest mode to have the best performance but may provide bigger space usage.
.br
\- \f(CRlow\-space\fP: Use the slowest mode with the smallest space usage by rewriting (if needed) few times the data to defragment the database.
.sp
Default: \f(CRlow\-space\fP
.RE
.SS "RocksDB Database Backend"
.sp
\f(CR\-\-rocksdb\-background\-threads <n>\fP
.RS 4
Sets the number of background threads RocksDB should use for parallelism to \f(CR<n>\fP. Default set to the available parallelism detected.
.sp
Default: \f(CR16\fP
.RE
.sp
\f(CR\-\-rocksdb\-max\-background\-jobs <n>\fP
.RS 4
Sets maximum number of concurrent background jobs (compactions and flushes) to \f(CR<n>\fP. Default set to the available parallelism detected.
.sp
Default: \f(CR16\fP
.RE
.sp
\f(CR\-\-rocksdb\-max\-subcompaction\-jobs <n>\fP
.RS 4
Sets maximum number of threads that will concurrently perform a compaction job by breaking it into multiple, smaller ones that are run simultaneously to \f(CR<n>\fP. Default set to the available parallelism detected.
.sp
Default: \f(CR16\fP
.RE
.sp
\f(CR\-\-rocksdb\-low\-priority\-background\-threads <n>\fP
.RS 4
Sets the size of the low\-priority thread pool that can be used to prevent compactions from stalling memtable flushes to \f(CR<n>\fP. Default set to the available parallelism detected
.sp
Default: \f(CR16\fP
.RE
.sp
\f(CR\-\-rocksdb\-max\-open\-files <n>\fP
.RS 4
Sets the number of open files that can be used by the DB to \f(CR<n>\fP. You may need to increase this if your database has a large working set. Value \-1 means files opened are always kept open
.sp
Default: \f(CR1024\fP
.RE
.sp
\f(CR\-\-rocksdb\-keep\-max\-log\-files <n>\fP
.RS 4
Sets the maximal number of info log files to be kept to \f(CR<n>\fP.
.sp
Default: \f(CR4\fP
.RE
.sp
\f(CR\-\-rocksdb\-compression\-mode <mode>\fP
.RS 4
Set the compression mode to use for RocksDB to \f(CR<mode>\fP.
.sp
Possible values: \f(CRnone\fP, \f(CRsnappy\fP, \f(CRzlib\fP, \f(CRbz2\fP, \f(CRlz4\fP, \f(CRlz4hc\fP, \f(CRzstd\fP
.sp
Default: \f(CRsnappy\fP
.RE
.sp
\f(CR\-\-rocksdb\-cache\-mode <mode>\fP
.RS 4
Sets the RocksDB block\-based cache mode to \f(CR<mode>\fP.
.sp
Possible values: \f(CRnone\fP, \f(CRlru\fP, \f(CRhyper_clock\fP
.sp
Default: \f(CRlru\fP
.RE
.sp
\f(CR\-\-rocksdb\-cache\-size <n>\fP
.RS 4
Sets the RocksDB block\-based cache size to \f(CR<n>\fP bytes. Note that this is only used if \f(CR\-\-rocksdb\-cache\-mode\fP is not \f(CRNone\fP.
.sp
Default: \f(CR67108864\fP
.RE
.sp
\f(CR\-\-rocksdb\-write\-buffer\-size <n>\fP
.RS 4
Sets the size of the write buffer for the amount of data to build up in memtables to \f(CR<n>\fP bytes.
.sp
Default: \f(CR67108864\fP
.RE
.sp
\f(CR\-\-rocksdb\-write\-buffer\-shared\fP
.RS 4
Enforces a limit for a single memtable using the above write buffer size. Disabled by default, each column will have its own buffer.
.RE
.sp
\f(CR\-\-recovery\-mode\fP
.RS 4
Enable the recovery mode of the daemon. No DB integrity check or pre\-computations will occur such as difficulty for tips, stable height, etc.
.RE
.sp
\f(CR\-\-disable\-zkp\-cache\fP
.RS 4
Disables the ZK Proofs cache, which is used to prevent verifying the same ZK ProofS twice. A transaction added to the mempool will be fully verified again once the transaction is in a block.
.RE
.sp
\f(CR\-\-disable\-ascii\-art\fP
.RS 4
Disable the ascii art at startup
.RE
.SH "CHECKPOINTS"
.sp
Blocks hashes checkpoints. No rewind can go below any of those checkpoints
.SH "COPYRIGHT"
.sp
BSD 3\-Clause License
.sp
Copyright (c) 2025, XELIS
.sp
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
.sp
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
.sp
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
.sp
Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
.sp
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH "SEE ALSO"
.sp
xelis_miner(1), xelis_wallet(1)